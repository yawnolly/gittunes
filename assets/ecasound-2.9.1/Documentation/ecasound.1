.TH "ecasound" "1" "05\&.05\&.2011" "" "Multimedia software"

.PP 
.SH "NAME"
ecasound \- sample editor, multitrack recorder, fx\-processor, etc\&.
.PP 
.SH "SYNOPSIS"
\fBecasound\fP [ general_options ] { [ chain_setup ] [ effect_setup ] [ input_setup ] [ output_setup ] }
.PP 
.SH "DESCRIPTION"

.PP 
Ecasound is a software package designed for multitrack audio
processing\&. It can be used for simple tasks like audio playback, 
recording and format conversions, as well as for multitrack effect 
processing, mixing, recording and signal recycling\&. Ecasound supports 
a wide range of audio inputs, outputs and effect algorithms\&. 
Effects and audio objects can be combined in various ways, and their
parameters can be controlled by operator objects like oscillators 
and MIDI\-CCs\&. A versatile console mode user\-interface is included 
in the package\&.
.PP 
.SH "OPTIONS"

.PP 
Note! All options except those mentioned in \fIecasound options\fP and 
\fIGlobal options\fP, can be used in ecasound chainsetup files (\&.ecs)\&.
.PP 
\fBECASOUND OPTIONS\fP
.IP 
These options are parsed and handled by the ecasound frontend binary and 
are not passed to backend library\&. This means that these options may
not work in other applications that use ecasound libraries for their
functionality\&.
.IP 
.IP "\-c"
Starts ecasound in interactive mode\&. In interactive mode you can
control ecasound with simple commands (\(dq\&start\(dq\&, \(dq\&stop\(dq\&, \(dq\&pause\(dq\&,
etc\&.)\&. See ecasound\-iam \&.
.IP 
.IP "\-C"
Disables ecasound\(cq\&s interactive mode (see \(cq\&\-c\(cq\& and \(cq\&\-K\(cq\&)\&.

.IP 
.IP "\-D"
Print all debug information to stderr (unbuffered, plain output
without ncurses)\&.
.IP 
.IP "\-s[:]chainsetup\-file"
Create a new chainsetup from file \(cq\&chainsetup\-file\(cq\& and add
it to the current session\&. Chainsetup files commonly have 
a filename ending to the \(cq\&\&.ecs\(cq\& extension\&. A chainsetup can 
contain inputs, outputs, chains, effects, controllers \-\- i\&.e\&.
objects one one specific configuration of audio processing
elements\&. A session, on the other hand, is a collection of 
one or more chainsetups\&. Only one of the chainsetups may be
connected (i\&.e\&. it can be run/processed)\&. But it is possible 
to have another chainsetup select (i\&.e\&. can be configured)
while other one is current connteced (i\&.e\&. running)\&. 
.IP 
.IP "\-E \(dq\&cmd1 [[args] ; cmd2 args ; \&.\&.\&. ; cmdN]\(dq\&"
Execute a set of Ecasound Interactive mode (EIAM) commands
at launch\&. These commands are executed immediately after 
ecasound is started\&. If the command line contains sufficient
options to create a valid chainsetup that will be executed,
the launch commands are executed after the other command
line options are parsed, but before the processing engine
is started\&. Note that this command is a feature of 
the ecasound frontend binary and not supported by 
the library backend\&. This means that other clients may
not support the \(cq\&\-E\(cq\& option, and also that the launch
commands are not saved as part of chainsetup or session
state\&.
.IP 
.IP "\-\-server"
Enables the so called NetECI mode, in which ecasound can
be controlled remotely over a socket connection\&. When
activated, clients can connect to the running ecasound 
session, and use interactive mode commands to control and
observe ecasound processing\&.
.IP 
The NetECI protocol is defined in 
Ecasound\(cq\&s Programmer Guide
.IP 
One example client using this feature is ecamonitor(1)\&. This
utility is included in the Ecasound distribution package (requires
a working Python environment)\&.
.IP 
\fIWarning!\fP If the machine running ecasound, is connected to 
a public network, be sure to block ecasound\(cq\&s port in your 
firewall! As there is no access control implemented for incoming
connections, anyone can otherwise connect, control and observe your 
ecasound sessions\&.
This option replaces \(cq\&\-\-daemon\(cq\& (deprecated in 2\&.6\&.0)\&.
.IP 
.IP "\-\-server\-tcp\-port=NNN"
Set the TCP port used by the daemon mode\&. By default
ecasound will use port number \fI2868\fP\&.
This option replaces \(cq\&\-\-daemon\-port\(cq\& (deprecated in 2\&.6\&.0)\&.
.IP 
.IP "\-\-no\-server"
Disable ecasound\(cq\&s daemon mode\&. This is the default\&.
This option replaces \(cq\&\-\-nodaemon\(cq\& (deprecated in 2\&.6\&.0)\&.
.IP 
.IP "\-\-osc\-udp\-port=NNN"
Enables support for Open Source Control (OSC)\&. Ecasound will listen
for incoming OSC messages on UDP port NNN\&. Ecasound\(cq\&s OSC interface
is documented at:
<http://ecasound\&.git\&.sourceforge\&.net/git/gitweb\&.cgi?p=ecasound/ecasound;a=blob;f=Documentation/ecasound_osc_interface\&.txt;hb=HEAD>
.IP 
Note that OSC support is still experimental and the interface
might change in later versions of Ecasound\&.
.IP 
This option was added to ecasound 2\&.7\&.0\&.
.IP 
.IP "\-\-keep\-running,\-K"
Do not exit when processing is finished/stopped\&. Only affects
non\-interactive operating mode (see \-c/\-C)\&.
Option added to ecasound 2\&.4\&.2\&.
.IP 
.IP "\-\-help,\-h"
Show this help\&.
.IP 
.IP "\-\-version"
Print version info\&.
.IP 
\fBGLOBAL OPTIONS\fP
.PP 
.IP "\-d, \-dd, \-ddd"
Increase the amount of printed debug messages\&. \fI\-d\fP adds 
some verbosity, while \fI\-ddd\fP results in very detailed 
output\&.
.IP 
.IP "\-d:debug_level"
Set the debug level mask to \(cq\&debug_level\(cq\&\&. This a bitmasked value with
the following classes: errors (1), info (2), subsystems (4), module_names (8),
user_objects (16), system_objects 32, functions (64), continuous (128) and
eiam_return_values (256)\&. Default is 271 (1+2+4+8+256)\&. See sourcode 
documentation for the ECA_LOGGER class for more detailed information\&.
.IP 
.IP "\-R[:]path\-to\-file"
Use ecasound resource file (see ecasoundrc man page) \(cq\&path\-to\-file\(cq\& as 
the only source of setting resource value\&. Specifying this option
will disable the normal policy of querying both global and user (if exists)
resource files\&.
.IP 
.IP "\-q"
Quiet mode, no output\&. Same as \fI\-d:0\fP\&.
.IP 
\fBGENERAL CHAINSETUP OPTIONS\fP

.IP 
.IP "\-a:chainname1, chainname2, \&.\&.\&."
Selects active signal chains\&. All inputs and outputs following
this \(cq\&\-a\(cq\& option are assigned to selected chains (until a new \-a
option is specified)\&. When adding effects, controllers and other
chain operators, only one chain can be selected at a time\&. If no \-a option 
has been given, chain \(cq\&default\(cq\& is used instead when adding objects\&. 
Chain name \(cq\&all\(cq\& is also reserved\&. It will cause all existing chains
to be selected\&. By giving multiple \-a options, you can control to which 
chains effects, inputs and outputs are assigned to\&. Look at the \fBEXAMPLES\fP
section for more detailed info about the usage of this option\&.
.IP 
.IP "\-n:name"
Sets the name of chainsetup to \(cq\&name\(cq\&\&. If not specified, defaults
either to \(dq\&command\-line\-setup\(dq\& or to the file name from which
chainsetup was loaded\&. Whitespaces are not allowed\&.
.IP 
.IP "\-x"
Truncate outputs\&. All output object are opened in overwrite mode\&. 
Any existing files will be truncated\&.
.IP 
.IP "\-X"
Open outputs for updating\&. Ecasound opens all outputs \- if target
format allows it \- in readwrite mode\&.
.IP 
.IP "\-z:feature"
Enables \(cq\&feature\(cq\&\&. Most features can be disabled using notation 
\fI\-z:nofeature\fP\&. \(cq\&\-z:db,dbsize\(cq\& enables double\-buffering for audio 
objects that support it (dbsize=0 for default, otherwise buffer
size in sample frames)\&. \(cq\&\-z:nodb\(cq\& disables double\-buffering\&. 
\(cq\&\-z:intbuf\(cq\& and \(cq\&\-z:nointbuf\(cq\& control whether extra internal buffering 
is allowed for realtime devices\&. Disabling this can reduce 
latency times in some situations\&. With \(cq\&\-z:xruns\(cq\&, processing will be 
halted if an under/overrun occurs\&. \(cq\&\-z:multitrack\(cq\& and
\(cq\&z:nomultitrack\(cq\& can be used to force ecasound to enable or disable
multitrack\-mode\&. In rare cases you may want to explicitly specify 
the recording offset with \(cq\&\-z:multitrack,offset\-in\-samples\(cq\&\&. The
offset is the amount of samples skipped when recording from 
real\-time inputs\&. \(cq\&\-z:psr\(cq\& enables the \fIprecise\-sample\-rates\fP mode 
for OSS\-devices\&. \(cq\&\-z:mixmode,sum\(cq\& enables mixing mode where channels
are mixed by summing all channels\&. The default is \(cq\&\-z:mixmode,avg\(cq\&,
in which channels are mixed by averaging\&. Mixmode selection was first
added to ecasound 2\&.4\&.0\&.
See ecasoundrc man page\&.
.IP 
\fBCHAINSETUP BUFFERING AND PERFORMANCE OPTIONS\fP

.IP 
.IP "\-B:buffering_mode"
Selects the default buffering mode\&. Mode is one of: \(cq\&auto\(cq\& (default),
\(cq\&nonrt\(cq\&, \(cq\&rt\(cq\&, \(cq\&rtlowlatency\(cq\&\&.
.IP 
.IP "\-b:buffer_size"
Sets the processing engine buffer size in samples\&. The size must be an exponent of 2,
and it is independent of channel count (e\&.g\&. \fI\-b:1024\fP at 48kHz will result in
21\&.333ms buffer length whether input is mono, stereo or 5\&.1)\&.
.IP 
This is an important option as this defines the length of one processing engine
iteration and affects ecasound behaviour in many ways\&. If not explicitly
specified, ecasound will try to choose an optimal value based on current
buffering mode (see \fI\-B\fP option)\&. For real\-time processing, you can try to set this
as low as possible to reduce the processing delay\&. Some machines can handle buffer
values as low as 64 and 128\&. In some circumstances (for instance when using
oscillator envelopes) small buffer sizes will make envelopes act more smoothly\&.
When not processing in real\-time (all inputs and outputs are normal files), larger
values may help to avoid buffer overruns, lower CPU usage and/or otherwise
improve performance\&.
.IP 
Note that when any JACK input/outputs are used, the buffer size setting is overridden
and set to period/buffer size reported by JACK server (e\&.g\&. jackd\(cq\&s \(cq\&\-p\(cq\& option)\&.
It is not possible to turn off this behaviour\&.
.IP 
If not explicitly specified, the default buffer size is chosen based on current
buffering mode (see \fI\-B\fP)\&.
.IP 
.IP "\-r:sched_priority"
Use realtime scheduling policy (SCHED_FIFO)\&. This is impossible if 
ecasound doesn\(cq\&t have root priviledges\&. Beware! This gives better 
performance, but can cause total lock\-ups if something goes wrong\&.
The \(cq\&sched_priority\(cq\& can be omitted (0=omitted)\&. If given, 
this is the static priority to the highest priority ecasound thread\&.
Other ecasound threads run with priority \(cq\&sched_priority\-1\&.\&.\&.n\(cq\&\&.
Value \(cq\&\-1\(cq\& can be used to disable raised\-priority mode\&.
.IP 
.IP "\-z:feature"
Relevant features are \-z:db,xxx (\-z:nodb) and \-z:intbuf (\-z:nointbuf)\&.
See section \fIGeneral chainsetup options\fP for details\&.
.IP 
\fBPROCESSING CONTROL\fP
.IP "\-t:seconds"
Sets processing time in seconds (doesn\(cq\&t have to be an integer value)\&.
If processing time isn\(cq\&t set, engine stops when all inputs are 
finished\&. This option is equivalent to the \(cq\&cs\-set\-length\(cq\& EIAM
command\&. A special\-case value of \(cq\&\-1\(cq\& will set the chainsetup length 
according to the longest input object\&.
.IP 
.IP "\-tl"
Enables looping\&. When processing is finished, engine will start 
again from beginning\&. This option is equivalent to the \(cq\&cs\-loop\(cq\& 
EIAM command\&.
.IP 
\fBINPUT/OUTPUT SETUP\fP
.PP 
See ecasound user\(cq\&s guide for 
more detailed documentation\&.
.PP 
.IP "\-G:mgrtype,optstring"
Sets options for audio object manager type \(cq\&mgrtype\(cq\&\&. 
For available options, see \(dq\&OBJECT TYPE SPECIFIC NOTES\(dq\& below\&.
.IP 
.IP "\-f:sample_format,channel,sample\-rate,interleaving"
Sets the audio stream parameters for subsequent audio objects\&.
To set different parameters for different audio objects, multiple
\(cq\&\-f\(cq\& options have to be specified (note the ordering, the \(cq\&\-f\(cq\&
options should precede the audio objects for them to have any
effect)\&. See documentation for \(cq\&\-i\(cq\& and \(cq\&\-o\(cq\& options\&.
.IP 
When an audio object is opened (e\&.g\&. a file or sound device
is opened, or connection is made to a sound server), the audio
stream parameters are passed to the object\&. It should be noted that
not all audio objects allow to set any or all of the parameters\&.
For instance when opening existing audio files, many file formats 
have a header describing the file audio parameters\&. In 
these cases the audio file header overrides the parameters
passed with \(cq\&\-f\(cq\& option\&. Similarly when creating JACK inputs and
outputs, the JACK server mandates the sampling rate and sample
format\&.
.IP 
If no \(cq\&\-f\(cq\& option is specified, or some of the argument fields
are left empty (e\&.g\&. \(cq\&\-f:,2,44100\(cq\&), ecasound will use default values\&. These 
default values are defined in ecasoundrc configuration file\&. See
ecasoundrc(5) manual page\&. 
.IP 
Note that ecasound opens out files by default in update mode\&. 
Unless option \(cq\&\-x\(cq\& (overwrite outputs) option is given, 
audio parameters of an existing audio file take preference over
the params set with \(cq\&\-f\(cq\&\&.
.IP 
Sample format is given as a formatted string\&. The first letter is 
either \(dq\&u\(dq\&, \(dq\&s\(dq\& and \(dq\&f\(dq\& (unsigned, signed, floating point)\&. The 
following number specifies sample size in bits\&. If sample is 
little endian, \(dq\&_le\(dq\& is added to the end\&. Similarly if big endian, 
\(dq\&_be\(dq\& is added\&. If endianness is not specified, host byte\-order is used\&. 
Currently supported formats are \(dq\&u8\(dq\& (same as \(dq\&8\(dq\&), \(dq\&s16_le\(dq\& (same 
as \(dq\&16\(dq\&), \(dq\&s16_be\(dq\&, \(dq\&s24_le\(dq\&, \(dq\&s24_be\(dq\&, \(dq\&s32_le\(dq\&, \(dq\&s32_be\(dq\&, \(dq\&f32_le\(dq\& 
and \(dq\&f32_be\(dq\&\&. An empty string \(dq\&\(dq\& picks the system default sample
format\&.
.IP 
The 4th parameter defines the channel layout\&. The available
options are \(cq\&i\(cq\& (interleaved\(cq\& and \(cq\&n\(cq\& (noninterleaved)\&. With 
the noninterleaved setting, ecasound will process samples
one channel at a time, and the blocksize is set with \(cq\&\-b\(cq\&\&.
The default setting is \(cq\&i\(cq\&\&.
.IP 
.IP "\-y:seconds"
Sets starting position for last specified input/output\&. If 
you need more flexible control over audio objects, you should
use the \fI\&.ewf\fP format\&.
.IP 
.IP "\-i[:]input\-file\-or\-device[,params]"
Specifies a new input source that is connected to all selected chains (chains
are selected with \(cq\&\-a:\&.\&.\&.\(cq\&)\&. Connecting multiple inputs to the same chain is 
not possible, but one input can be connected to multiple chains\&. Input can be 
a a file, device or some other audio object (see below)\&. If the input is 
a file, its type is determined using the file name extension\&. If the object 
name contains any commas, the name must be enclosed in backquotes to avoid 
confusing the parser\&. Currently supported formats are RIFF WAVE files (\&.wav), 
audio\-cd tracks (\&.cdr), ecasound EWF files (\&.ewf), RAW audio data (\&.raw) and 
MPEG audio files (\&.mp2,\&.mp3)\&. More audio formats are supported via libaudiofile
and libsndfile libraries (see documentation below)\&. MikMod is also supported (\&.xm, 
\&.mod, \&.s3m, \&.it, etc)\&. MIDI files (\&.mid) are supported using Timidity++\&. 
Similarly Ogg Vorbis (\&.ogg) can be read, and written if ogg123 and vorbize tools
are installed; FLAC files (\&.flac) with flac command\-line tools or using
libsndfile; and AAC files (\&.aac/\&.m4a/\&.mp4) with faad2/faac tools\&. Supported 
realtime devices are OSS audio devices (/dev/dsp*), ALSA audio and loopback 
devices and JACK audio subsystem\&. If no inputs are specified, the first 
non\-option (doesn\(cq\&t start with \(cq\&\-\(cq\&) command line argument is considered 
to be an input\&.
.IP 
.IP "\-o[:]output\-file\-or\-device[,params]"
Works in the same way as the \-i option\&. If no outputs are specified,
the default output device is used (see ~/\&.ecasoundrc)\&. If the object 
name contains any commas, the name must be enclosed in backquotes to 
avoid confusing the parser\&. Note, many object types do not support
output (e\&.g\&. MikMod, MIDI and many others)\&.
.IP 
\fIOBJECT TYPE SPECIFIC NOTES\fP
.IP "ALSA devices \- \(cq\&alsa\(cq\&"
When using ALSA drivers, instead of a device filename, you need to
use the following option syntax: \fB\-i[:]alsa,pcm_device_name\fP\&.
.IP 
.IP "ALSA direct\-hw and plugin access \- \(cq\&alsahw\(cq\&, \(cq\&alsaplugin\(cq\&"
It\(cq\&s also possible to use a specific card and device combination
using the following notation: \fB\-i[:]alsahw,card_number,device_number,subdevice_number\fP\&.
Another option is the ALSA PCM plugin layer\&. It works just like 
the normal ALSA pcm\-devices, but with automatic channel count and 
sample format conversions\&. Option syntax is 
\fB\-i[:]alsaplugin,card_number,device_number,subdevice_number\fP\&.
.IP 
.IP "aRts input/output \- \(cq\&arts\(cq\&"
If enabled at compile\-time, ecasound supports audio input and 
output using aRts audio server\&. Option syntax is \fB\-i:arts\fP,
\fB\-o:arts\fP\&.
.IP 
.IP "Audio file sequencing \- \(cq\&audioloop\(cq\&, \(cq\&select\(cq\&, \(cq\&playat\(cq\&"
Ecasound provides a set of special audio object types that 
can be used for temporal sequencing of audio files \- i\&.e\&. looping,
playing only a select portion of a file, playing file at a spefific
time, and other such operation\&.
.IP 
Looping is possible with \fB\-i:audioloop,file\&.ext,params\fP\&. The
file name (or any object type understood by Ecasound) given
as the second parameter is played back continuously looping
back to the beginning when the end of file is reached\&. Any additional
parameters given are passed unaltered to the file object\&.
Parameters 3\&.\&.\&.N are passed as is to the child object (i\&.e\&.
\(dq\&\-i audioloop,foo\&.wav,bar1,bar2\(dq\& will pass parameters
\(dq\&bar1,bar2\(dq\& to the \(dq\&foo\&.wav\(dq\& object\&.
.IP 
To select and use only a specific segment of an audio object,
the \fB\-i:select,start\-time,duration,file\&.ext,params\fP can
be used\&. This will play \(dq\&duration\(dq\& of \(dq\&file\&.ext\(dq\&, starting at 
\(dq\&start\-time\(dq\&\&. The time values should be given as seconds (e\&.g\&.
\(dq\&2\&.25\(dq\&, or as samples (e\&.g\&. \(dq\&25000sa\(dq\&)\&. Parameters 4\&.\&.\&.N are 
passed as is to the child object\&.
.IP 
To play an audio object at a given moment in time, 
the \fB\-i:playat,play\-at\-time,file\&.ext,params\fP can be
used\&. This will play \(dq\&file\&.ext\(dq\& after position reaches 
\(dq\&play\-at\-time\(dq\&\&. The time values should be given as seconds (e\&.g\&.
\(dq\&2\&.25\(dq\&, or as samples (e\&.g\&. \(dq\&25000sa\(dq\&)\&. Parameters 2\&.\&.\&.N are 
passed as is to the child object\&.
.IP 
.IP "Ecasound Wave Files (EWF) \- \(cq\&*\&.ewf\(cq\&"
A special file format that allows one to slice and loop full (or segments)
of audio files\&. This format is specific to Ecasound\&.
See ecasound user\(cq\&s guide for more 
detailed information\&.
.IP 
See also audio object types \(cq\&audioloop\(cq\&, \(cq\&select\(cq\& and \(cq\&playat\(cq\&\&.
.IP 
.IP "JACK input/outputs \- Overview"
JACK is a low\-latency audio server that can be used to connect
multiple independent audio application to each other\&.
It is different from other audio server efforts in that
it has been designed from the ground up to be suitable for low\-latency
professional audio work\&. 
.IP 
.IP "JACK input/outputs \- \(cq\&jack\(cq\&"
Ecasound provides multiple ways to communicate with JACK 
servers\&. To create a JACK input or output object, one should use \fB\-i jack\fP and 
\fB\-o jack\fP\&. These create JACK client ports \(dq\&ecasound:in_N\(dq\& and 
\(dq\&ecasound:out_n\(dq\& respectively (\(cq\&N\(cq\& is replaced by the channel number)\&.
Ecasound automatically creates one JACK port for each channel (number
of channels is set with \fB\-f:bits,channels,rate\fP option)\&.
.IP 
It is important to note that by default JACK ports are not connected
anywhere (e\&.g\&. to soundcard input/outputs, or to other apps)\&. One thus
has to connect the ports with an external program (e\&.g\&. \(dq\&QJackCtl\(dq\&
or \(dq\&jack_connect\(dq\&)\&.
.IP 
.IP "JACK input/outputs \- \(cq\&jack,clientname,portprefix\(cq\&"
\fB\(dq\&jack,clientname\(dq\&\fP For simple use scanerios, ecasound provides a way to autoconnect
the ecasound ports\&. This can be done with by giving the peer client
name as the second parameter to the \(dq\&jack\(dq\& object, e\&.g\&. \fB\-o jack,clientname\fP\&.
As an example, \fB\-o jack,system\fP will create an output that is
automatically connected to outputs of the default system soundcard\&.
The client parameter can be omitted, in which case no automatic
connections are made\&.
.IP 
If one needs to change the port prefix (e\&.g\&. \(dq\&in\(dq\& in client name 
\(dq\&ecasound:in_N\(dq\&), the prefix can be specified as the third parameter to 
\(dq\&jack\(dq\& object, e\&.g\&. \fB\-o jack,,fxout\fP\&. Also the third parameter can be 
omitted, in which case the default prefixes \(dq\&in\(dq\& and \(dq\&out\(dq\& are used\&.
.IP 
.IP "JACK input/outputs \- \(cq\&jack_multi\(cq\&"
A variant of \(cq\&jack\(cq\& object type is \(cq\&jack_multi\(cq\&\&. The full object syntax
is \fBjack_multi,destport1,\&.\&.\&.,destportN\fP\&. When a \(cq\&jack_multi\(cq\& object
is connected to a JACK server, first channel of the object is connected
to JACK port \(cq\&destport1\(cq\&, second to \(cq\&destport2\(cq\& and so forth\&. For
instance \(dq\&\-f:32,2,44100 \-o jack_multi,foo:in,bar:in\(dq\&
creates a stereo ecasound output object, with its left and right
channels routed to two difference JACK clients\&. The destination ports
must be active when the ecasound engine is launched, or otherwise 
the connections cannot be established\&. If destination ports are not
specified for all channels, or zero length strings are given, those
ports are not connected at launch by ecasound\&.
.IP 
.IP "JACK input/outputs \- \(cq\&jack_alsa\(cq\&, \(cq\&jack_auto\(cq\&, \(cq\&jack_generic\(cq\& (**deprecated since 2\&.6\&.0**)"
Ecasound 2\&.5 and older supported \(dq\&jack_alsa\(dq\&, \(dq\&jack_auto\(dq\& and \(dq\&jack_generic\(dq\& object 
types, but these are now replaced by a more generic \(dq\&jack\(dq\& interface, and thus are
now deprecated (they work but are no longer documented)\&.
.IP 
.IP "JACK input/outputs \- client options"
Additionally global JACK options can be set using 
\fB\-G:jack,client_name,operation_mode\fP option\&. \(cq\&client_name\(cq\& 
is the name used when registering ecasound to the JACK system\&. 
If \(cq\&operation_mode\(cq\& is \(dq\&notransport\(dq\&,  ecasound will ignore 
any transport state changes in the JACK\-system; in mode 
\(dq\&send\(dq\& it will send all start, stop and position\-change events to 
other JACK clients; in mode \(dq\&recv\(dq\& ecasound will follow JACK start, 
stop and position\-change events; and mode \(dq\&sendrecv\(dq\& which is 
a combination of the two previous modes\&.
.IP 
If not explicitly set, in interactive mode (\fB\(cq\&\-c\(cq\&\fP option), the
default mode is \(dq\&sendrecv\(dq\&, while in batchmode default is
\(dq\&notransport\(dq\&\&. In both cases the mode can be changed with \fB\-G\fP
option as described above\&.
.IP 
More details about ecasound\(cq\&s JACK support can be found
from Ecasound User\(cq\&s Guide\&.
.IP 
.IP "Libaudiofile \- \(cq\&audiofile\(cq\&"
If libaudiofile support was enabled at compile\-time, this
option allows you to force Ecasound to use libaudiofile 
for reading/writing a certain audio file\&. Option syntax 
is \fB\-i:audiofile,foobar\&.ext\fP (same for \fB\-o\fP)\&.
.IP 
.IP "Libsndfile \- \(cq\&sndfile\(cq\&"
If libsndfile support was enabled at compile\-time, this
option allows you to force Ecasound to use libsndfile 
for reading/writing a certain audio file\&. Option syntax 
is \fB\-i:sndfile,foobar\&.ext[,\&.format\-ext]\fP (same for \fB\-o\fP)\&.
The optional third parameter \(dq\&format\(dq\& can be used to 
override the audio format (for example you can create an
AIFF file with filename \(dq\&foo\&.wav\(dq\&)\&.
.IP 
.IP "Loop device \- \(cq\&loop\(cq\&"
Loop devices make it possible to route (loop back) data between 
chains\&. Option syntax is \fB\-[io][:]loop,tag\fP\&. If you add
a loop output with tag \(cq\&1\(cq\&, all data written to this output is routed
to any loop input with tag \(cq\&1\(cq\&\&. The tag can be either numerical
(e\&.g\&. \(cq\&\-i:loop,1\(cq\&) or a string (e\&.g\&. \(dq\&\-i:loop,vocals\(dq\&)\&. Like 
with other input/output objects, you can attach the same loop 
device to multiple chains and this way split/mix the signal\&.
.IP 
Note: this \(cq\&loop\(cq\& device is different from \(cq\&audioloop\(cq\& (latter
added to ecasound v2\&.5\&.0)\&.
.IP 
.IP "Mikmod \- \(cq\&mikmod\(cq\&"
If mikmod support was enabled at compile\-time, this
option allows you to force Ecasound to use Mikmod 
for reading/writing a certain module file\&. Option syntax 
is \fB\-i:mikmod,foobar\&.ext\fP\&.
.IP 
.IP "Null inputs/outputs \- \(cq\&null\(cq\&"
If you specify \(dq\&null\(dq\& or \(dq\&/dev/null\(dq\& as the input or output, 
a null audio device is created\&. This is useful if you just want
to analyze sample data without writing it to a file\&. There\(cq\&s 
also a realtime variant, \(dq\&rtnull\(dq\&, which behaves just like \(dq\&null\(dq\& 
objects, except all i/o is done at realtime speed\&.
.IP 
.IP "Resample \- \(cq\&resample\(cq\&"
Object type \(cq\&resample\(cq\& can be used to resample audio 
object\(cq\&s audio data to match the sampling rate used
in the active chainsetup\&. For example, 
\fBecasound \-f:16,2,44100 \-i resample,22050,foo\&.wav \-o /dev/dsp\fP,
will resample file from 22\&.05kHz to 44\&.1kHz and write the
result to the soundcard device\&. Child sampling rate can be 
replaced with keyword \(cq\&auto\(cq\&\&. In this case ecasound will try 
to query the child object for its sampling rate\&. This works with 
files formats such as \&.wav which store meta information about 
the audio file format\&. To use \(cq\&auto\(cq\& in the previous example, 
\fBecasound \-f:16,2,44100 \-i resample,auto,foo\&.wav \-o /dev/dsp\fP\&.
.IP 
Parameters 4\&.\&.\&.N are passed as is to the child object (i\&.e\&.
\(dq\&\-i resample,22050,foo\&.wav,bar1,bar2\(dq\& will pass parameters
\(dq\&bar1,bar2\(dq\& to the \(dq\&foo\&.wav\(dq\& object\&.
.IP 
If ecasound was compiled with support for libsamplerate, you can 
use \(cq\&resample\-hq\(cq\& to use the highest quality resampling algorithm 
available\&. To force ecasound to use the internal resampler, 
\(cq\&resampler\-lq\(cq\& (low\-quality) can be used\&.
.IP 
.IP "Reverse \- \(cq\&reverse\(cq\&"
Object type \(cq\&reverse\(cq\& can be used to reverse audio 
data coming from an audio object\&. As an example, 
\fBecasound \-i reverse,foo\&.wav \-o /dev/dsp\fP will play 
\(cq\&foo\&.wav\(cq\& backwards\&. Reversing output objects is not 
supported\&. Note! Trying to reverse audio object types with really 
slow seek operation (like mp3), works extremely badly\&.
Try converting to an uncompressed format (wav or raw)
first, and then do reversation\&.
.IP 
Parameters 3\&.\&.\&.N are passed as is to the child object (i\&.e\&.
\(dq\&\-i reverse,foo\&.wav,bar1,bar2\(dq\& will pass parameters
\(dq\&bar1,bar2\(dq\& to the \(dq\&foo\&.wav\(dq\& object\&.
.IP 
.IP "System standard streams and named pipes \- \(cq\&stdin\(cq\&, \(cq\&stdout\(cq\&"
You can use standard streams (stdin and stdout) by giving \fBstdin\fP
or \fBstdout\fP as the file name\&. Audio data is assumed to be in
raw/headerless (\&.raw) format\&. If you want to use named pipes, 
create them with the proper file name extension before use\&.
.IP 
.IP "Tone generator \- \(cq\&tone\(cq\&"
To generate a test tone, input \fB\-i:tone,type,freq,duration\-secs\fP 
can be used\&. Parameter \(cq\&type\(cq\& specifies the tone type: currently
only \(cq\&sine\(cq\& is supported\&. The \(cq\&freq\(cq\& parameter sets the frequency 
of the generated tone and \(cq\&duration\-secs\(cq\& the length of the generated
stream\&. Specifying zero, or a negative value, as the duration will
produce an infinite stream\&. This feature was first added to Ecasound 
2\&.4\&.7\&.
.IP 
.IP "Typeselect \- \(cq\&typeselect\(cq\&"
The special \(cq\&typeselect\(cq\& object type can be used to override 
how ecasound maps filename extensions and object types\&. For 
instance \fBecasound \-i typeselect,\&.mp3,an_mp3_file\&.wav \-o /dev/dsp\fP\&.
would play the file \(cq\&an_mp3_file\&.wav\(cq\& as an mp3\-file and not
as an wav\-file as would happen without typeselect\&.
.IP 
Parameters 4\&.\&.\&.N are passed as is to the child object (i\&.e\&.
\(dq\&\-i typeselect,\&.au,foo\&.wav,bar1,bar2\(dq\& will pass parameters
\(dq\&bar1,bar2\(dq\& to the \(dq\&foo\&.wav\(dq\& object\&.
.IP 
\fBMIDI SETUP\fP
.PP 
.IP "MIDI I/O devices \- general"
If no MIDI\-device is specified, the default MIDI\-device is 
used (see ecasoundrc(5))\&.
.IP 
.IP "\-Md:rawmidi,device_name"
Add a rawmidi MIDI I/O device to the setup\&. \(cq\&device_name\(cq\& can be anything 
that can be accessed using the normal UNIX file operations and 
produces raw MIDI bytes\&. Valid devices are for example OSS rawmidi 
devices (/dev/midi00), ALSA rawmidi devices (/dev/snd/midiC2D0), named 
pipes (see mkfifo man page), and normal files\&. 
.IP 
.IP "\-Md:alsaseq,sequencer\-port"
Adds a ALSA MIDI sequencer port to the setup\&. \(cq\&sequencer\-port\(cq\& identifies
a port to connect to\&. It can be numerical (e\&.g\&. 128:1), or a client
name (e\&.g\&. \(dq\&KMidimon\(dq\&)\&.
.IP 
.IP "\-Mms:device_id"
Sends MMC start (\(dq\&Deferred Play\(dq\&) and stop (\(dq\&Stop\(dq\&) with 
device ID \(cq\&device_id\(cq\&\&.
.IP 
While Ecasound does not directly support syncing transport state 
to incoming MMC messages, this can be achieved by connecting Ecasound
to JACK input/outputs, and using a tool such as JackMMC and JackCtlMMC (
see <http://jackctlmmc\&.sourceforge\&.net/>) to convert MMC messages
into JACK transport change events\&.
.IP 
.IP "\-Mss"
Sends MIDI\-sync (i\&.e\&. \(dq\&MIDI Start\(dq\& and \(dq\&MIDI Stop\(dq\& system realtime 
messages) \&.to the selected MIDI\-device\&. Notice that as Ecasound will 
not send \fIMIDI\-clock\fP, but only the \fIstart\fP and \fIstop\fP messages\&.
.IP 
\fBEFFECT SETUP\fP
.PP 
\fIPRESETS\fP
.PP 
Ecasound has a powerful effect preset system that allows you create
new effects by combining basic effects and controllers\&. See
ecasound user\(cq\&s guide for more 
detailed information\&.
.PP 
.IP "\-pf:preset_file\&.eep"
Uses the first preset found from file \(cq\&preset_file\&.eep\(cq\& as 
a chain operator\&.
.IP 
.IP "\-pn:preset_name"
Find preset \(cq\&preset_name\(cq\& from global preset database and use
it as a chain operator\&. See ecasoundrc man page for info about the 
preset database\&.
.IP 
\fISIGNAL ANALYSIS\fP
.PP 
.IP "\-ev"
Analyzes sample data to find out how much the signal can
be amplified without clipping\&. The resulting percent value
can be used as a parameter to \(cq\&\-ea\(cq\& (amplify)\&. A statistical
summary, containing info about the stereo\-image and
distribution of sample values, is printed out at the end
of processing\&.
.IP 
.IP "\-evp"
Peak amplitude watcher\&. Maintains peak information for 
each processed channels\&. Peak information is resetted
on every read\&.
.IP 
.IP "\-ezf"
Finds the optimal value for DC\-adjusting\&. You can use the result
as a parameter to \-ezx effect\&.
.IP 
\fIGENERAL SIGNAL PROCESSING ALGORITHMS\fP
.IP "\-eS:stamp\-id"
Audio stamp\&. Takes a snapshot of passing audio data and stores
it using id \(cq\&stamp\-id\(cq\& (integer number)\&. This data can later be
used by controllers and other operators\&.
.IP 
.IP "\-ea:amplify%"
Adjusts the signal amplitude to \(cq\&amplify%\(cq\& percent (linear scale, i\&.e\&. 
individual samples are multiplied by \(cq\&amplify%/100\(cq\&)\&. See also 
\(cq\&\-eadb\(cq\&\&.
.IP 
.IP "\-eac:amplify%,channel"
Amplifies signal of channel \(cq\&channel\(cq\& by amplify\-% percent (linear 
scale, i\&.e\&. individual samples are multiplied by \(cq\&amplify%/100\(cq\&)\&. 
\(cq\&channel\(cq\& ranges from 1\&.\&.\&.n where n is the total number of channels\&. 
See also \(cq\&\-eadb\(cq\&\&.
.IP 
.IP "\-eadb:gain\-dB[,channel]"
Adjusts signal level by \(cq\&gain\-dB\(cq\&, with a gain of 0dB having no effect
to the signal, negative gains attenuating the signal and positive
gain values amplifying it\&. The \(cq\&channel\(cq\& parameter (1\&.\&.\&.n) is optional\&. 
If \(cq\&channel\(cq\& parameter is specified, and its value is nonzero, gain is 
only applied to the given channel (1\&.\&.\&.n)\&.
.IP 
.IP "\-eaw:amplify%,max\-clipped\-samples"
Amplifies signal by amplify\-% percent (linear scale, i\&.e\&. individual
samples are multiplied by \(cq\&amplify%/100\(cq\&)\&. If number of consecutive
clipped samples (resulting sample value is outside the nominal 
[\-1,1] range), a warning will be issued\&.
.IP 
.IP "\-eal:limit\-%"
Limiter effect\&. Limits audio level to \(cq\&limit\-%\(cq\& (linear scale) with
values equal or greater than 100% resulting in no change to
the signal\&.
.IP 
.IP "\-ec:rate,threshold\-%"
Compressor (a simple one)\&. \(cq\&rate\(cq\& is the compression rate in
decibels (\(cq\&rate\(cq\& dB change in input signal causes 1dB change 
in output)\&. \(cq\&threshold\(cq\& varies between 0\&.0 (silence) and
1\&.0 (max amplitude)\&.
.IP 
.IP "\-eca:peak\-level\-%, release\-time\-sec, fast\-crate, crate"
A more advanced compressor (original algorithm by John S\&. Dyson)\&. 
If you give a value of 0 to any parameter, the default is used\&.
\(cq\&peak\-level\-%\(cq\& essentially specifies how hard the peak limiter
is pushed\&.  The default of 69% is good\&. \(cq\&release_time\(cq\& is given 
in seconds\&. This compressor is very sophisticated, and actually
the release time is complex\&.  This is one of the dominant release 
time controls, but the actual release time is dependent on a lot of 
factors regarding the dynamics of the audio in\&. \(cq\&fastrate\(cq\& is the 
compression ratio for the fast compressor\&.  This is not really 
the compression ratio\&.  Value of 1\&.0 is infinity to one, while the 
default 0\&.50 is 2:1\&.  Another really good value is special cased in 
the code: 0\&.25 is somewhat less than 2:1, and sounds super smooth\&.
\(cq\&rate\(cq\& is the compression ratio for the entire compressor chain\&.  
The default is 1\&.0, and holds the volume very constant without many nasty
side effects\&.  However the dynamics in music are severely restricted,
and a value of 0\&.5 might keep the music more intact\&.
.IP 
.IP "\-enm:threshold\-level\-%,pre\-hold\-time\-msec,attack\-time\-msec,post\-hold\-time\-msec,release\-time\-msec"
Noise gate\&. Supports multichannel processing (each channel 
processed separately)\&. When signal amplitude falls below
\(cq\&threshold_level_%\(cq\& percent (100% means maximum amplitude), gate 
is activated\&. If the signal stays below the threshold for 
\(cq\&th_time\(cq\& ms, it\(cq\&s faded out during the attack phase of 
\(cq\&attack\(cq\& ms\&. If the signal raises above the \(cq\&threshold_level\(cq\& 
and stays there over \(cq\&hold\(cq\& ms the gate is released during 
\(cq\&release\(cq\& ms\&.
.IP 
.IP "\-ei:pitch\-shift\-%"
Pitch shifter\&. Modifies audio pitch by altering its length\&.
.IP 
.IP "\-epp:right\-%"
Stereo panner\&. Changes the relative balance between the first
two channels\&. When \(cq\&right\-%\(cq\& is 0, only signal on the left 
(1st) channel is passed through\&. Similarly if it is \(cq\&100\(cq\&, 
only right (2nd) channel is let through\&.
.IP 
.IP "\-ezx:channel\-count,delta\-ch1,\&.\&.\&.,delta\-chN"
Adjusts the signal DC by \(cq\&delta\-chX\(cq\&, where X is the 
channel number\&. Use \-ezf to find the optimal delta 
values\&.
.IP 
\fIENVELOPE MODULATION\fP

.IP 
.IP "\-eemb:bpm,on\-time\-%"
Pulse gate (pulse frequency given as beats\-per\-minute)\&.
.IP 
.IP "\-eemp:freq\-Hz,on\-time\-%"
Pulse gate\&.
.IP 
.IP "\-eemt:bpm,depth\-%"
Tremolo effect (tremolo speed given as beats\-per\-minute)\&.
.IP 
\fIFILTER EFFECTS\fP
.IP "\-ef1:center_freq, width"
Resonant bandpass filter\&. \(cq\&center_freq\(cq\& is the center frequency\&. Width
is specified in Hz\&. 
.IP 
.IP "\-ef3:cutoff_freq, reso, gain"
Resonant lowpass filter\&. \(cq\&cutoffr_freq\(cq\& is the filter cutoff
frequency\&. \(cq\&reso\(cq\& means resonance\&. Usually the best values for
resonance are between 1\&.0 and 2\&.0, but you can use even bigger values\&.
\(cq\&gain\(cq\& is the overall gain\-factor\&. It\(cq\&s a simple multiplier (1\&.0 
is the normal level)\&. With high resonance values it often is useful 
to reduce the gain value\&.
.IP 
.IP "\-ef4:cutoff, resonance"
Resonant lowpass filter (3rd\-order, 36dB, original algorithm by Stefan
M\&. Fendt)\&. Simulates an analog active RC\-lowpass design\&. Cutoff is a
value between [0,1], while resonance is between [0,infinity)\&.
.IP 
.IP "\-efa:delay\-samples,feedback\-%"
Allpass filter\&. Passes all frequencies with no change in amplitude\&.
However, at the same time it imposes a frequency\-dependent 
phase\-shift\&.
.IP 
.IP "\-efc:delay\-samples,radius"
Comb filter\&. Allows the spikes of the comb to pass through\&.
Value of \(cq\&radius\(cq\& should be between [0, 1\&.0)\&.
.IP 
.IP "\-efb:center\-freq,width"
Bandpass filter\&. \(cq\&center_freq\(cq\& is the center frequency\&. Width
is specified in Hz\&. 
.IP 
.IP "\-efh:cutoff\-freq"
Highpass filter\&. Only frequencies above \(cq\&cutoff_freq\(cq\& are passed
through\&.
.IP 
.IP "\-efi:delay\-samples,radius"
Inverse comb filter\&. Filters out the spikes of the comb\&. There
are \(cq\&delay_in_samples\-2\(cq\& spikes\&. Value of \(cq\&radius\(cq\& should be 
between [0, 1\&.0)\&. The closer it is to the maximum value,
the deeper the dips of the comb are\&.
.IP 
.IP "\-efl:cutoff\-freq"
Lowpass filter\&. Only frequencies below \(cq\&cutoff_freq\(cq\& are passed
through\&.
.IP 
.IP "\-efr:center\-freq,width"
Bandreject filter\&. \(cq\&center_freq\(cq\& is the center frequency\&. Width
is specified in Hz\&. 
.IP 
.IP "\-efs:center\-freq,width"
Resonator\&. \(cq\&center_freq\(cq\& is the center frequency\&. Width is specified
in Hz\&. Basicly just another resonating bandpass filter\&.
.IP 
\fICHANNEL MIXING / ROUTING\fP

.IP 
.IP "\-chcopy:from\-channel, to\-channel"
Copy channel \(cq\&from_channel\(cq\& to \(cq\&to_channel\(cq\&\&. If \(cq\&to_channel\(cq\& 
doesn\(cq\&t exist, it is created\&. Channel indexing starts from 1\&.
Option added to ecasound 2\&.4\&.5\&.
.IP 
.IP "\-chmove:from\-channel, to\-channel"
Copy channel \(cq\&from_channel\(cq\& to \(cq\&to_channel\(cq\&, and mutes the source
channel \(cq\&from_channel\(cq\&\&. Channel indexing starts from 1\&.
Option added to ecasound 2\&.4\&.5\&.
.IP 
.IP "\-chorder:ch1,\&.\&.\&.,chN"
Reorder, omit and/r duplicate chain channels\&. The resulting
audio stream has total of \(cq\&N\(cq\& channels\&. Each parameter specifies
the source channel to use for given output channel\&. As an
example, \(cq\&\-chorder:2,1\(cq\& would reverse the channels of 
a stereo stream (\(cq\&out1,out2\(cq\& = \(cq\&in2,in1\(cq\&)\&. Specifying the same 
source channel multiple times is allowed\&. For example, \(cq\&\-chorder:2,2\(cq\&
would route the second channel to both two output channels 
(\(cq\&out1,out2\(cq\& = \(cq\&in2,in2\(cq\&)\&. If \(cq\&chX\(cq\& is zero, the given channel \(cq\&X\(cq\& 
will be muted in the output stream\&. Option added to ecasound 2\&.7\&.0\&.
.IP 
.IP "\-chmix:to\-channel"
Mix all source channels to channel \(cq\&to_channel\(cq\&\&.  If \(cq\&to_channel\(cq\& 
doesn\(cq\&t exist, it is created\&. Channel indexing starts from 1\&.
Option added to ecasound 2\&.4\&.5\&.
.IP 
.IP "\-chmute:channel"
Mutes the channel \(cq\&channel\(cq\&\&. Channel indexing starts from 1\&.
Option added to ecasound 2\&.4\&.5\&.
.IP 
.IP "\-erc:from\-channel,to\-channel"
Deprecated, see \fI\-chcopy\fP\&.
.IP 
.IP "\-erm:to\-channel"
Deprecated, see \fI\-chmix\fP\&.
.IP 
\fITIME\-BASED EFFECTS\fP

.IP 
.IP "\-etc:delay\-time\-msec,variance\-time\-samples,feedback\-%,lfo\-freq"
Chorus\&.
.IP 
.IP "\-etd:delay\-time\-msec,surround\-mode,number\-of\-delays,mix\-%,feedback\-%"
Delay effect\&. \(cq\&delay time\(cq\& is the delay time in milliseconds\&.
\(cq\&surround\-mode\(cq\& is a integer with following meanings: 0 = normal, 
1 = surround, 2 = stereo\-spread\&. \(cq\&number_of_delays\(cq\& should be 
obvious\&. Beware that large number of delays and huge delay times 
need a lot of CPU power\&. \(cq\&mix\-%\(cq\& expresses the mix balance between the original
and delayed signal, with 0 meaning no delayed signal, 100 meaning no 
original signal, and 50 (the default) achieving an equal balance\&.
\(cq\&feedback\-%\(cq\& represents how much of the signal is recycled in each delay
or, if you prefer, at what rate the repeated snippet of delayed audio 
fades\&. Note that sufficiently low feedback values may result in a number
of audible repetitions lesser than what you have specified for \(cq\&number_of_delays\(cq\&,
especially if you have set a low value for \(cq\&mix\-%\(cq\&\&. By default the value
for this parameter is 100% (No signal loss\&.)\&.
.IP 
.IP "\-ete:room_size,feedback\-%,wet\-%"
A more advanced reverb effect (original algorithm by Stefan M\&. Fendt)\&. 
\(cq\&room_size\(cq\& is given in meters, \(cq\&feedback\-%\(cq\& is the feedback level
given in percents and \(cq\&wet\-%\(cq\& is the amount of reverbed signal added 
to the original signal\&.
.IP 
.IP "\-etf:delay\-time\-msec"
Fake\-stereo effect\&. The input signal is summed to mono\&. The
original signal goes to the left channels while a delayed 
version (with delay of \(cq\&delay time\(cq\& milliseconds) is goes to
the right\&. With a delay time of 1\-40 milliseconds this 
adds a stereo\-feel to mono\-signals\&. 
.IP 
.IP "\-etl:delay\-time\-msec,variance\-time\-samples,feedback\-%,lfo\-freq"
Flanger\&.
.IP 
.IP "\-etm:delay\-time\-msec,number\-of\-delays,mix\-%"
Multitap delay\&. \(cq\&delay time\(cq\& is the delay time in milliseconds\&.
\(cq\&number_of_delays\(cq\& should be obvious\&. \(cq\&mix\-%\(cq\& determines how much 
effected (wet) signal is mixed to the original\&.
.IP 
.IP "\-etp:delay\-time\-msec,variance\-time\-samples,feedback\-%,lfo\-freq"
Phaser\&.
.IP 
.IP "\-etr:delay\-time,surround\-mode,feedback\-%"
Reverb effect\&. \(cq\&delay time\(cq\& is the delay time in milliseconds\&.
If \(cq\&surround\-mode\(cq\& is \(cq\&surround\(cq\&, reverbed signal moves around the
stereo image\&. \(cq\&feedback\-%\(cq\& determines how much effected (wet)
signal is fed back to the reverb\&.
.IP 
\fILADSPA\-PLUGINS\fP
.IP "\-el:plugin_unique_name,param\-1,\&.\&.\&.,param\-N"
Ecasound supports LADSPA\-effect plugins (Linux Audio Developer\(cq\&s Simple
Plugin API)\&. Parameters 1\&.\&.N are set as values of the plugin\(cq\&s control 
ports\&.
.IP 
If plugin has more than one audio input and/or output port, 
only one plugin is instance is created, and the chain channels
are fed to the same plugin instance\&. If plugin has at most one
input and at most one output audio port, a separate plugin instance
is created for each channel of the ecasound chain (e\&.g\&. for a stereo
audio channel, two LADSPA plugins of same type are created, with
one per channel)\&.
.IP 
Plugins are located in shared library (\&.so) files\&. Ecasound looks
for plugins in @prefix@/lib/ladspa (e\&.g\&. \(dq\&/usr/local/lib/ladspa\(dq\&), 
directories listed in environment variable \fILADSPA_PATH\fP\&. Plugin
search path can be configured also via \fIecasoundrc\fP, see 
ecasoundrc(5) man page\&. One shared library file can contain multiple 
plugin objects, but every plugin has a unique plugin name\&. This name is
used for selecting plugins\&.
.IP 
See LAD mailing list web site for
more info about LADSPA\&. Other useful sites are LADSPA home
page and LADSPA
documentation\&.
.IP 
.IP "\-eli:plugin_unique_number,param\-1,\&.\&.\&.,param\-N"
Same as above (\fI\-el\fP) expect plugin\(cq\&s unique id\-number is used\&. It
is guaranteed that these id\-numbers are unique among all 
LADSPA plugins\&.
.IP 
\fILV2 PLUGINS\fP
.IP "\-elv2:plugin\-id\-uri,param\-1,\&.\&.\&.,param\-N"
Ecasound also supports LV2 audio plugins\&. LV2 plugins are 
identified by a globally unique, case\-sensitive identifier\&.
.IP 
If plugin has more than one audio input and/or output port, 
only one plugin is instance is created, and the chain channels
are fed to the same plugin instance\&. If plugin has at most one
input and at most one output audio port, a separate plugin instance
is created for each channel of the ecasound chain (e\&.g\&. for a stereo
audio channel, two LV2 plugins of same type are created, with
one per channel)\&.
.IP 
LV2 is a plugin standard for audio systems\&. 

.PP 
\fIGATE SETUP\fP
.PP 
.IP "\-gc:start\-time,len"
Time crop gate\&. Initially gate is closed\&. After \(cq\&start\-time\(cq\& seconds
has elapsed, gate opens and remains open for \(cq\&len\(cq\& seconds\&. When
closed, passing audio buffers are trucated to zero length\&.
.IP 
.IP "\-ge:open\-threshold\-%,close\-thold\-%,volume\-mode,reopen\-count"
Threshold gate\&. Initially gate is closed\&. It is opened when volume
goes over \(cq\&othreshold\(cq\& percent\&. After this, if volume drops below
\(cq\&cthold\(cq\& percent, gate is closed and won\(cq\&t be opened again, unless the
\(cq\&reopen\-count\(cq\& is set to anything other than zero\&.
If \(cq\&value_mode\(cq\& is \(cq\&rms\(cq\&, average RMS volume is used\&. Otherwise
peak average is used\&.  When closed, passing audio buffers are trucated
to zero length\&.
If the \(cq\&reopen\-count\(cq\& is set to a positive number, then the gate will 
restart its operation that many times\&. So for example, a reopen count 
of 1 will cause up to 2 openings of the gate\&. A negative value for \(cq\&reopen\-count\(cq\&
will result in the gate reopening indefinitely\&. The \(cq\&reopen\-count\(cq\& is invaluable 
in recording vinyl and tapes, where you can set things up and then recording 
starts whenever the needle is on the vinyl, and stops when it\(cq\&s off\&. As many sides 
as you like can be recorded in one session\&.  You will need to experiment with 
buffer lengths and start/stop levels to get reliable settings for your equipment\&.
.IP 
.IP "\-gm:state"
Manual gate\&. If \(cq\&state\(cq\& is 1, gate is open and all samples are
passed through\&. If \(cq\&state\(cq\& is zero, gate is closed an no samples are
let through\&. This chain operator is useful when writing to an output
needs to be stopped dynamically (without stopping the whole engine)\&.
.IP 
\fICONTROL ENVELOPE SETUP\fP

.IP 
Controllers can be used to dynamically change effect parameters
during processing\&. All controllers are attached to the selected
(=usually the last specified effect/controller) effect\&. The first
three parameters are common for all controllers\&. \(cq\&fx_param\(cq\& 
specifies the parameter to be controlled\&. Value \(cq\&1\(cq\& means 
the first parameter, \(cq\&2\(cq\& the second and so on\&. \(cq\&start_value\(cq\& 
and \(cq\&end_value\(cq\& set the value range\&. For examples, look at the
the \fBEXAMPLES\fP section\&.
.IP 
.IP "\-kos:fx\-param,start\-value,end\-value,freq,i\-phase"
Sine oscillator with frequency of \(cq\&freq\(cq\& Hz and initial phase
of \(cq\&i_phase\(cq\& times pi\&.
.IP 
.IP "\-kog:fx\-param,start\-value,end\-value,freq,mode,point\-pairs,first\-value,last\-value,pos1,value1,\&.\&.\&."
Generic oscillator\&. Frequency \(cq\&freq\(cq\& Hz, mode either \(cq\&0\(cq\& for
static values or \(cq\&1\(cq\& for linear interpolation\&. \(cq\&point\-pairs\(cq\&
specifies the number of \(cq\&posN\(cq\& \- \(cq\&valueN\(cq\& pairs to include\&.
\(cq\&first\-value\(cq\& and \(cq\&last\-value\(cq\& are used as border values (values
for position 0\&.0/first and position 1\&.0/last)\&.
All \(cq\&posN\(cq\& and \(cq\&valueN\(cq\& must be between 0\&.0 and 1\&.0\&. Also, 
for all \(cq\&posN\(cq\& values \(cq\&pos1 < pos2 < \&.\&.\&. < posN\(cq\& must be true\&.
.IP 
.IP "\-kf:fx\-param,start\-value,end\-value,freq,mode,genosc\-number"
Generic oscillator\&. \(cq\&genosc_number\(cq\& is the number of the 
oscillator preset to be loaded\&. Mode is either \(cq\&0\(cq\& for
static values or \(cq\&1\(cq\& for linear interpolation\&. The location for 
the preset file is taken from \&./ecasoundrc (see \fIecasoundrc man page\fP)\&.
.IP 
.IP "\-kl:fx\-param,start\-value,end\-value,time\-seconds"
Linear envelope that starts from \(cq\&start_value\(cq\& and linearly 
changes to \(cq\&end_value\(cq\& during \(cq\&time_in_seconds\(cq\&\&. Can
be used for fadeins and fadeouts\&.
.IP 
.IP "\-kl2:fx\-param,start\-value,end\-value,1st\-stage\-length\-sec,2nd\-stage\-length\-sec"
Two\-stage linear envelope, a more versatile tool for doing fade\-ins
and fade\-outs\&. Stays at \(cq\&start_value\(cq\& for \(cq\&1st_stage_length\(cq\& seconds
and then linearly changes towards \(cq\&end_value\(cq\& during
\(cq\&2nd_stage_length\(cq\& seconds\&.
.IP 
.IP "\-klg:fx\-param,low\-value,high\-value,point_count,pos1,value1,\&.\&.\&.,posN,valueN"
Generic linear envelope\&. This controller source can be 
used to map custom envelopes to chain operator parameters\&. Number of
envelope points is specified in \(cq\&point_count\(cq\&\&. Each envelope point
consists of a position and a matching value\&. Number of pairs must
match \(cq\&point_count\(cq\& (i\&.e\&. \(cq\&N==point_count\(cq\&)\&. The \(cq\&posX\(cq\& parameters are given 
as seconds (from start of the stream)\&. The envelope points are specified as 
float values in range \(cq\&[0,1]\(cq\&\&. Before envelope values are mapped to operator
parameters, they are mapped to the target range of \(cq\&[low\-value,high\-value]\(cq\&\&. E\&.g\&.
a value of \(cq\&0\(cq\& will set operator parameter to \(cq\&low\-value\(cq\& and a value of
\(cq\&1\(cq\& will set it to \(cq\&high\-value\(cq\&\&. For the initial segment \(cq\&[0,pos1]\(cq\&, the envelope 
will output value of \(cq\&value1\(cq\& (e\&.g\&. \(cq\&low\-value\(cq\&)\&.
.IP 
.IP "\-km:fx\-param,start\-value,end\-value,controller,channel"
MIDI continuous controller (control change messages)\&. 
Messages on the MIDI\-channel \(cq\&channel\(cq\& that are coming from
controller number \(cq\&controller\(cq\& are used as the controller
source\&. As recommended by the MIDI\-specification, channel
numbering goes from 1 to 16\&. Possible controller numbers 
are values from 0 to 127\&. The MIDI\-device where bytes
are read from can be specified using \fI\-Md\fP option\&. 
Otherwise the default MIDI\-device is used as specified in 
\fI~ecasound/ecasoundrc\fP (see \fIecasoundrc man page\fP)\&. 
Defaults to \fI/dev/midi\fP\&.
.IP 
.IP "\-ksv:fx\-param,start\-value,end\-value,stamp\-id,rms\-toggle"
Volume analyze controller\&. Analyzes the audio stored in 
stamp \(cq\&stamp\-id\(cq\& (see \(cq\&\-eS:id\(cq\& docs), and creates
control data based on the results\&. If \(cq\&rms\-toggle\(cq\& is non\-zero, 
RMS\-volume is used to calculate the control value\&. Otherwise
average peak\-amplitude is used\&.
.IP 
.IP "\-kx"
This is a special switch that can be used when you need
to control controller parameters with another controller\&. 
When you specify \fI\-kx\fP, the last specified controller 
will be set as the control target\&. Then you just add
another controller as usual\&. 

.PP 
\fBINTERACTIVE MODE\fP
.PP 
See \fIecasound\-iam(1)\fP man page\&.
.PP 
.SH "ENVIRONMENT"

.IP 
.IP "ECASOUND"
If defined, some utility programs and scripts will use 
the \fIECASOUND\fP environment as the default path to
ecasound executable\&.
.PP 
.IP "ECASOUND_LOGFILE"
Output all debugging messages to a separate log file\&. If defined, 
\fIECASOUND_LOGFILE\fP defines the logfile path\&. This is a good tool for 
debugging ECI/EIAM scripts and applications\&.
.PP 
.IP "ECASOUND_LOGLEVEL"
Select which messages are written to the logfile defined by 
\fIECASOUND_LOGFILE\fP\&. The syntax for \fI\-d:level\fP is used\&. If not
defined, all messages are written\&. Defaults to \-d:319 (everything else
but \(cq\&functions (64)\(cq\& and \(cq\&continuous (128)\(cq\& class messages)\&.
.PP 
.IP "COLUMNS"
Ecasound honors the \fICOLUMNS\fP environment variable when 
formatting printed trace messages\&. If \fICOLUMNS\fP is not set, 
a default of 74 is used\&.
.PP 
.IP "TMPDIR"
Some functions of Ecasound (e\&.g\&. \(dq\&cs\-edit\(dq\& interactive command) require
creation of temporary files\&. By default, these files are created under
\(dq\&/tmp\(dq\&, but this can be overridden by setting the \fITMPDIR\fP environment
variable\&.

.IP 
.SH "RETURN VALUES"

.IP 
In interactive mode, ecasound always returns zero\&.
.IP 
In non\-interactive (batch) mode, a non\-zero value is returned
for the following errors: 
.IP 
.IP "1"
Unable to create a valid chainsetup with the given parameters\&. Can be 
caused by invalid option syntax, etc\&.
.PP 
.IP "2"
Unable to start processing\&. This can be caused by insufficient file 
permissions, inability to access some system resources, etc\&.
.PP 
.IP "3"
Error during processing\&. Possible causes: output object has run
out of free disk space, etc\&.
.PP 
.IP "4"
Error during process termination and/or cleanup\&. See section
on \(cq\&SIGNALS\(cq\& for further details\&.
.PP 
.SH "SIGNALS"

.PP 
When ecasound receives any of the POSIX signals SIGINT (ctrl\-c), 
SIGHUP, SIGTERM or SIGQUIT, normal cleanup and exit procedure is 
initiated\&. Here normal exit means that e\&.g\&. file headers are 
updated before closing, helper processes are terminated in normal 
way, and so forth\&.
.PP 
If, while doing the cleanup described above, ecasound receives
another signal (of the same set of POSIX signals), ecasound
will skip the normal cleanup procedure, and terminate
immediately\&. Any remaining cleanup tasks will be skipped\&. 
Depending on the runtime state and configuration, this brute 
force exit may have some side\-effects\&. Ecasound will return
exit code of \(cq\&4\(cq\& if normal cleanup was skipped\&.
.PP 
Special case handling is applied to the SIGINT (ctrl\-c) signal\&.
If a SIGINT signal is received during the cleanup procedure,
ecasound will ignore the signal once, and emit a notice to \(cq\&stderr\(cq\&
that cleanup is already in progress\&. Any subsequent SIGINT signals 
will no longer get special handling, and instead process will 
terminate immediately (and possibly without proper cleanup)\&.
.PP 
.SH "FILES"

.PP 
\fI~/\&.ecasound\fP
The default directory for ecasound user resource files\&. 
See the ecasoundrc (5) man page man page\&.
.PP 
\fI*\&.ecs\fP 
Ecasound Chainsetup files\&. Syntax is more or less the
same as with command\-line arguments\&.
.PP 
\fI*\&.ecp\fP 
Ecasound Chain Preset files\&. Used for storing effect
and chain operator presets\&. See ecasound user\(cq\&s guide for
more better documentation\&.
.PP 
\fI*\&.ews\fP 
Ecasound Wave Stats\&. These files are used to cache
waveform data\&.
.PP 
.SH "EXAMPLES"

.PP 
Examples of how to perform common tasks with ecasound can
be found at 
http://nosignal\&.fi/ecasound/Documentation/examples\&.html\&.
.PP 
.SH "SEE ALSO"

.PP 
ecatools (1) man page, 
ecasound\-iam (1) man page
ecasoundrc (5) man page, 
\(dq\&HTML docs in the Documentation subdirectory\(dq\&
.PP 
.SH "BUGS"

.PP 
See file BUGS\&. If ecasound behaves weirdly, try to
increase the debug level to see what\(cq\&s going on\&.
.PP 
.SH "AUTHOR"

.PP 
Kai Vehmanen, <kvehmanen \-at\- eca \-dot\- cx <kvehmanen \-at\- eca \-dot\- cx>>
